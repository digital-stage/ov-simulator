{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tobias/Developer/digitalstage/ov-simulator/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport useAuth from \"../libs/useAuth\";\nimport { TeckosClientWithJWT } from 'teckos-client';\nvar email = \"test@digital-stage.org\";\nvar password = \"testtesttest\";\n\nvar Index = function Index() {\n  _s();\n\n  var _useAuth = useAuth(),\n      signInWithEmailAndPassword = _useAuth.signInWithEmailAndPassword,\n      token = _useAuth.token;\n\n  var _useState = useState(),\n      socket = _useState[0],\n      setSocket = _useState[1];\n\n  var _useState2 = useState(),\n      device = _useState2[0],\n      setDevice = _useState2[1];\n\n  useEffect(function () {\n    // Sign in\n    signInWithEmailAndPassword(email, password);\n  }, []);\n  useEffect(function () {\n    // Got token, register self as device\n    var initialDevice = {\n      name: 'OV Simulator',\n      canOv: true,\n      canAudio: true,\n      sendAudio: true,\n      receiveAudio: true,\n      soundCardIds: []\n    };\n    var nSocket = new TeckosClientWithJWT(process.env.NEXT_PUBLIC_API_URL, {\n      reconnection: true,\n      timeout: 1000\n    }, token, {\n      device: initialDevice\n    });\n    nSocket.on(\"connect\", function () {\n      console.log(\"connected!\");\n    });\n    nSocket.on(\"device-ready\", function (device) {\n      console.log(\"connected!\");\n      setDevice(device);\n    });\n    nSocket.connect();\n    setSocket(nSocket);\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Token: \", token ? \"ok\" : \"requesting\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Device:\", device ? JSON.stringify(device) : \"requesting\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Index, \"o1ZnetVc5rcNqVYuVy56sXCOVPM=\", false, function () {\n  return [useAuth];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/pages/index.tsx"],"names":["useEffect","useState","useAuth","TeckosClientWithJWT","email","password","Index","signInWithEmailAndPassword","token","socket","setSocket","device","setDevice","initialDevice","name","canOv","canAudio","sendAudio","receiveAudio","soundCardIds","nSocket","process","env","NEXT_PUBLIC_API_URL","reconnection","timeout","on","console","log","connect","JSON","stringify"],"mappings":";;;;;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAAuBC,mBAAvB,QAAiD,eAAjD;AAGA,IAAMC,KAAK,GAAG,wBAAd;AACA,IAAMC,QAAQ,GAAG,cAAjB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAA;;AAAA,iBAC4BJ,OAAO,EADnC;AAAA,MACTK,0BADS,YACTA,0BADS;AAAA,MACmBC,KADnB,YACmBA,KADnB;;AAAA,kBAEYP,QAAQ,EAFpB;AAAA,MAETQ,MAFS;AAAA,MAEDC,SAFC;;AAAA,mBAGYT,QAAQ,EAHpB;AAAA,MAGTU,MAHS;AAAA,MAGDC,SAHC;;AAKhBZ,EAAAA,SAAS,CAAC,YAAM;AACZ;AACAO,IAAAA,0BAA0B,CAACH,KAAD,EAAQC,QAAR,CAA1B;AACH,GAHQ,EAGN,EAHM,CAAT;AAKAL,EAAAA,SAAS,CAAC,YAAM;AACZ;AACA,QAAMa,aAA8B,GAAG;AACnCC,MAAAA,IAAI,EAAE,cAD6B;AAEnCC,MAAAA,KAAK,EAAE,IAF4B;AAGnCC,MAAAA,QAAQ,EAAE,IAHyB;AAInCC,MAAAA,SAAS,EAAE,IAJwB;AAKnCC,MAAAA,YAAY,EAAE,IALqB;AAMnCC,MAAAA,YAAY,EAAE;AANqB,KAAvC;AASA,QAAMC,OAAO,GAAG,IAAIjB,mBAAJ,CACZkB,OAAO,CAACC,GAAR,CAAYC,mBADA,EAEZ;AACIC,MAAAA,YAAY,EAAE,IADlB;AAEIC,MAAAA,OAAO,EAAE;AAFb,KAFY,EAMZjB,KANY,EAOZ;AACIG,MAAAA,MAAM,EAAEE;AADZ,KAPY,CAAhB;AAYAO,IAAAA,OAAO,CAACM,EAAR,CAAW,SAAX,EAAsB,YAAK;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,KAFD;AAKAR,IAAAA,OAAO,CAACM,EAAR,CAAW,cAAX,EAA2B,UAACf,MAAD,EAAmB;AAC1CgB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAhB,MAAAA,SAAS,CAACD,MAAD,CAAT;AACH,KAHD;AAKAS,IAAAA,OAAO,CAACS,OAAR;AAEAnB,IAAAA,SAAS,CAACU,OAAD,CAAT;AAEH,GArCQ,EAqCN,CAACZ,KAAD,CArCM,CAAT;AAuCA,sBACI;AAAA,2BACI;AAAA,8BACI;AAAA,8BACYA,KAAK,GAAG,IAAH,GAAU,YAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAII;AAAA,8BAEKG,MAAM,GAAGmB,IAAI,CAACC,SAAL,CAAepB,MAAf,CAAH,GAA4B,YAFvC;AAAA;AAAA;AAAA;AAAA;AAAA,eAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAaH,CA9DD;;GAAML,K;UAC0CJ,O;;;KAD1CI,K;AA+DN,eAAeA,KAAf","sourcesContent":["import {useEffect, useState} from \"react\";\nimport useAuth from \"../libs/useAuth\";\nimport {ITeckosClient, TeckosClientWithJWT} from 'teckos-client';\nimport {Device} from \"../utils/types/Device\";\n\nconst email = \"test@digital-stage.org\";\nconst password = \"testtesttest\";\n\nconst Index = () => {\n    const {signInWithEmailAndPassword, token} = useAuth();\n    const [socket, setSocket] = useState<ITeckosClient>();\n    const [device, setDevice] = useState<Device>();\n\n    useEffect(() => {\n        // Sign in\n        signInWithEmailAndPassword(email, password);\n    }, []);\n\n    useEffect(() => {\n        // Got token, register self as device\n        const initialDevice: Partial<Device> = {\n            name: 'OV Simulator',\n            canOv: true,\n            canAudio: true,\n            sendAudio: true,\n            receiveAudio: true,\n            soundCardIds: [],\n        };\n\n        const nSocket = new TeckosClientWithJWT(\n            process.env.NEXT_PUBLIC_API_URL,\n            {\n                reconnection: true,\n                timeout: 1000,\n            },\n            token,\n            {\n                device: initialDevice,\n            }\n        );\n\n        nSocket.on(\"connect\", () =>{\n            console.log(\"connected!\")\n        });\n\n\n        nSocket.on(\"device-ready\", (device: Device) =>{\n            console.log(\"connected!\")\n            setDevice(device);\n        })\n\n        nSocket.connect();\n\n        setSocket(nSocket);\n\n    }, [token])\n\n    return (\n        <div>\n            <ul>\n                <li>\n                    Token: {token ? \"ok\" : \"requesting\"}\n                </li>\n                <li>\n                    Device:\n                    {device ? JSON.stringify(device) : \"requesting\"}\n                </li>\n            </ul>\n        </div>\n    )\n};\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}