{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ServerStageEvents } from \"../types/SocketEvents\";\nimport upsert from \"./upsert\";\nimport omit from 'lodash/omit';\nimport { StageMember } from \"../types/StageMember\";\nexport const addStageMember = stageMember => {\n  return {\n    type: ServerStageEvents.STAGE_MEMBER_ADDED,\n    payload: StageMember\n  };\n};\nexport const changeStageMember = stageMember => {\n  return {\n    type: ServerStageEvents.STAGE_MEMBER_ADDED,\n    payload: StageMember\n  };\n};\nexport const removeStageMember = id => {\n  return {\n    type: ServerStageEvents.STAGE_MEMBER_REMOVED,\n    payload: string\n  };\n};\n\nfunction StageMemberReducer(state, action) {\n  switch (action.type) {\n    case ServerStageEvents.STAGE_MEMBER_ADDED:\n      {\n        const stageMember = action.payload;\n        return {\n          byId: _objectSpread(_objectSpread({}, state.byId), {}, {\n            [stageMember._id]: stageMember\n          }),\n          byGroup: _objectSpread(_objectSpread({}, state.byGroup), {}, {\n            [stageMember.groupId]: upsert([...state.byGroup[stageMember.groupId]], stageMember._id)\n          }),\n          allIds: upsert(state.allIds, stageMember._id)\n        };\n      }\n\n    case ServerStageEvents.STAGE_MEMBER_CHANGED:\n      {\n        const stageMember = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          byId: _objectSpread(_objectSpread({}, state.byId), {}, {\n            [stageMember._id]: _objectSpread(_objectSpread({}, state.byId[stageMember._id]), stageMember)\n          })\n        });\n      }\n\n    case ServerStageEvents.STAGE_MEMBER_REMOVED:\n      {\n        const removedId = action.payload;\n        const stageMember = state.byId[removedId];\n        if (!stageMember) return state;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          byId: omit(state.byId, removedId),\n          byGroup: _objectSpread(_objectSpread({}, state.byGroup), {}, {\n            [stageMember.groupId]: state.byGroup[stageMember.groupId].filter(id => id !== removedId)\n          }),\n          allIds: state.allIds.filter(id => id !== removedId)\n        });\n      }\n\n    default:\n      throw new Error(\"Unsupported event: \" + action);\n  }\n}\n\nexport default StageMemberReducer;","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/utils/reducers/StageMemberReducer.ts"],"names":["ServerStageEvents","upsert","omit","StageMember","addStageMember","stageMember","type","STAGE_MEMBER_ADDED","payload","changeStageMember","removeStageMember","id","STAGE_MEMBER_REMOVED","string","StageMemberReducer","state","action","byId","_id","byGroup","groupId","allIds","STAGE_MEMBER_CHANGED","removedId","filter","Error"],"mappings":";;;;;;AAAA,SAAQA,iBAAR,QAAgC,uBAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAAQC,WAAR,QAA0B,sBAA1B;AAOA,OAAO,MAAMC,cAAc,GAAIC,WAAD,IAA8B;AACxD,SAAO;AACHC,IAAAA,IAAI,EAAEN,iBAAiB,CAACO,kBADrB;AAEHC,IAAAA,OAAO,EAAEL;AAFN,GAAP;AAIH,CALM;AAMP,OAAO,MAAMM,iBAAiB,GAAIJ,WAAD,IAA8B;AAC3D,SAAO;AACHC,IAAAA,IAAI,EAAEN,iBAAiB,CAACO,kBADrB;AAEHC,IAAAA,OAAO,EAAEL;AAFN,GAAP;AAIH,CALM;AAMP,OAAO,MAAMO,iBAAiB,GAAIC,EAAD,IAAgB;AAC7C,SAAO;AACHL,IAAAA,IAAI,EAAEN,iBAAiB,CAACY,oBADrB;AAEHJ,IAAAA,OAAO,EAAEK;AAFN,GAAP;AAIH,CALM;;AAiBP,SAASC,kBAAT,CAA4BC,KAA5B,EAAiDC,MAAjD,EAA0F;AACtF,UAAQA,MAAM,CAACV,IAAf;AACI,SAAKN,iBAAiB,CAACO,kBAAvB;AAA2C;AACvC,cAAMF,WAAwB,GAAGW,MAAM,CAACR,OAAxC;AACA,eAAO;AACHS,UAAAA,IAAI,kCACGF,KAAK,CAACE,IADT;AAEA,aAACZ,WAAW,CAACa,GAAb,GAAmBb;AAFnB,YADD;AAKHc,UAAAA,OAAO,kCACAJ,KAAK,CAACI,OADN;AAEH,aAACd,WAAW,CAACe,OAAb,GAAuBnB,MAAM,CAAS,CAAC,GAAGc,KAAK,CAACI,OAAN,CAAcd,WAAW,CAACe,OAA1B,CAAJ,CAAT,EAAkDf,WAAW,CAACa,GAA9D;AAF1B,YALJ;AASHG,UAAAA,MAAM,EAAEpB,MAAM,CAASc,KAAK,CAACM,MAAf,EAAuBhB,WAAW,CAACa,GAAnC;AATX,SAAP;AAWH;;AACD,SAAKlB,iBAAiB,CAACsB,oBAAvB;AAA6C;AACzC,cAAMjB,WAAwB,GAAGW,MAAM,CAACR,OAAxC;AACA,+CACOO,KADP;AAEIE,UAAAA,IAAI,kCACGF,KAAK,CAACE,IADT;AAEA,aAACZ,WAAW,CAACa,GAAb,mCACOH,KAAK,CAACE,IAAN,CAAWZ,WAAW,CAACa,GAAvB,CADP,GAEOb,WAFP;AAFA;AAFR;AAUH;;AACD,SAAKL,iBAAiB,CAACY,oBAAvB;AAA6C;AACzC,cAAMW,SAAiB,GAAGP,MAAM,CAACR,OAAjC;AACA,cAAMH,WAAwB,GAAGU,KAAK,CAACE,IAAN,CAAWM,SAAX,CAAjC;AACA,YAAI,CAAClB,WAAL,EACI,OAAOU,KAAP;AACJ,+CACOA,KADP;AAEIE,UAAAA,IAAI,EAAEf,IAAI,CAACa,KAAK,CAACE,IAAP,EAAaM,SAAb,CAFd;AAGIJ,UAAAA,OAAO,kCACAJ,KAAK,CAACI,OADN;AAEH,aAACd,WAAW,CAACe,OAAb,GAAuBL,KAAK,CAACI,OAAN,CAAcd,WAAW,CAACe,OAA1B,EAAmCI,MAAnC,CAA0Cb,EAAE,IAAIA,EAAE,KAAKY,SAAvD;AAFpB,YAHX;AAOIF,UAAAA,MAAM,EAAEN,KAAK,CAACM,MAAN,CAAaG,MAAb,CAAoBb,EAAE,IAAIA,EAAE,KAAKY,SAAjC;AAPZ;AASH;;AACD;AACI,YAAM,IAAIE,KAAJ,CAAU,wBAAwBT,MAAlC,CAAN;AA5CR;AA8CH;;AAED,eAAeF,kBAAf","sourcesContent":["import {ServerStageEvents} from \"../types/SocketEvents\";\nimport upsert from \"./upsert\";\nimport omit from 'lodash/omit';\nimport {StageMember} from \"../types/StageMember\";\n\nexport type StageMemberAction =\n    { type: ServerStageEvents.STAGE_MEMBER_ADDED, payload: StageMember }\n    | { type: ServerStageEvents.STAGE_MEMBER_CHANGED, payload: StageMember }\n    | { type: ServerStageEvents.STAGE_MEMBER_REMOVED, payload: string };\n\nexport const addStageMember = (stageMember: StageMember) => {\n    return {\n        type: ServerStageEvents.STAGE_MEMBER_ADDED,\n        payload: StageMember,\n    };\n};\nexport const changeStageMember = (stageMember: StageMember) => {\n    return {\n        type: ServerStageEvents.STAGE_MEMBER_ADDED,\n        payload: StageMember,\n    };\n};\nexport const removeStageMember = (id: string) => {\n    return {\n        type: ServerStageEvents.STAGE_MEMBER_REMOVED,\n        payload: string,\n    };\n};\n\nexport interface StageMembers {\n    byId: {\n        [id: string]: StageMember\n    },\n    byGroup: {\n        [groupId: string]: string[]\n    },\n    allIds: string[]\n}\n\nfunction StageMemberReducer(state: StageMembers, action: StageMemberAction): StageMembers {\n    switch (action.type) {\n        case ServerStageEvents.STAGE_MEMBER_ADDED: {\n            const stageMember: StageMember = action.payload;\n            return {\n                byId: {\n                    ...state.byId,\n                    [stageMember._id]: stageMember\n                },\n                byGroup: {\n                    ...state.byGroup,\n                    [stageMember.groupId]: upsert<string>([...state.byGroup[stageMember.groupId]], stageMember._id),\n                },\n                allIds: upsert<string>(state.allIds, stageMember._id)\n            }\n        }\n        case ServerStageEvents.STAGE_MEMBER_CHANGED: {\n            const stageMember: StageMember = action.payload;\n            return {\n                ...state,\n                byId: {\n                    ...state.byId,\n                    [stageMember._id]: {\n                        ...state.byId[stageMember._id],\n                        ...stageMember\n                    }\n                }\n            }\n        }\n        case ServerStageEvents.STAGE_MEMBER_REMOVED: {\n            const removedId: string = action.payload;\n            const stageMember: StageMember = state.byId[removedId];\n            if (!stageMember)\n                return state;\n            return {\n                ...state,\n                byId: omit(state.byId, removedId),\n                byGroup: {\n                    ...state.byGroup,\n                    [stageMember.groupId]: state.byGroup[stageMember.groupId].filter(id => id !== removedId)\n                },\n                allIds: state.allIds.filter(id => id !== removedId)\n            }\n        }\n        default:\n            throw new Error(\"Unsupported event: \" + action);\n    }\n}\n\nexport default StageMemberReducer;\n"]},"metadata":{},"sourceType":"module"}