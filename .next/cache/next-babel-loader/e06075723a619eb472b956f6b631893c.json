{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tobias/Developer/digitalstage/ov-simulator/components/PresetEditor.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport useStage from \"../libs/useStage\";\nimport { useCallback } from \"react\";\nimport upsert from \"../utils/upsert\";\nimport { ClientDeviceEvents } from \"../utils/types/SocketEvents\";\nimport * as React from \"react\";\n\nvar ChannelActivator = function ChannelActivator(props) {\n  _s();\n\n  var numChannels = props.numChannels,\n      channels = props.channels,\n      onChange = props.onChange;\n  var enableChannel = useCallback(function (channelId) {\n    onChange(upsert(channels, channelId));\n  }, [channels]);\n  var disableChannel = useCallback(function (channelId) {\n    onChange(channels.filter(function (id) {\n      return id !== channelId;\n    }));\n  }, [channels]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Array.from(Array(numChannels).keys()).map(function (channelId) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"input-\" + channelId,\n          type: \"checkbox\",\n          value: channelId,\n          checked: channels.indexOf(channelId) !== -1,\n          onChange: function onChange(e) {\n            if (e.currentTarget.checked) {\n              enableChannel(channelId);\n            } else {\n              disableChannel(channelId);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input-\" + channelId,\n          children: channelId + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true);\n    })\n  }, void 0, false);\n};\n\n_s(ChannelActivator, \"jqJT98q2Fz8PxfZqTMxwtebQNS0=\");\n\n_c = ChannelActivator;\n\nvar PresetEditor = function PresetEditor(props) {\n  _s2();\n\n  var soundCard = props.soundCard;\n\n  var _useStage = useStage(),\n      socket = _useStage.socket,\n      presets = _useStage.presets;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: soundCard.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.numInputChannels, \" input channels\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.numOutputChannels, \" output channels\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.sampleRate, \" Hz sample rate\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: presets.bySoundCard[soundCard._id] && presets.bySoundCard[soundCard._id].map(function (id) {\n          return presets.byId[id];\n        }).map(function (preset) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              border: '1px solid black'\n            },\n            children: [preset.name, /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Input:\", /*#__PURE__*/_jsxDEV(ChannelActivator, {\n                numChannels: soundCard.numInputChannels,\n                channels: preset.inputChannels,\n                onChange: function onChange(channels) {\n                  socket.emit(ClientDeviceEvents.CHANGE_TRACK_PRESET, {\n                    id: preset._id,\n                    update: {\n                      inputChannels: channels\n                    }\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 33\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Output:\", /*#__PURE__*/_jsxDEV(ChannelActivator, {\n                numChannels: soundCard.numOutputChannels,\n                channels: preset.outputChannels,\n                onChange: function onChange(channels) {\n                  socket.emit(ClientDeviceEvents.CHANGE_TRACK_PRESET, {\n                    id: preset._id,\n                    update: {\n                      outputChannels: channels\n                    }\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 33\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Remove Preset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Preset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, _this);\n};\n\n_s2(PresetEditor, \"2RS11EwG6Cn+2/EJurP+lz3NR04=\", false, function () {\n  return [useStage];\n});\n\n_c2 = PresetEditor;\nexport default PresetEditor;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChannelActivator\");\n$RefreshReg$(_c2, \"PresetEditor\");","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/components/PresetEditor.tsx"],"names":["useStage","useCallback","upsert","ClientDeviceEvents","React","ChannelActivator","props","numChannels","channels","onChange","enableChannel","channelId","disableChannel","filter","id","Array","from","keys","map","indexOf","e","currentTarget","checked","PresetEditor","soundCard","socket","presets","name","numInputChannels","numOutputChannels","sampleRate","bySoundCard","_id","byId","preset","border","inputChannels","emit","CHANGE_TRACK_PRESET","update","outputChannels"],"mappings":"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","sourcesContent":["import {SoundCard} from \"../utils/types/SoundCard\";\nimport useStage from \"../libs/useStage\";\nimport {useCallback} from \"react\";\nimport upsert from \"../utils/upsert\";\nimport {ClientDeviceEvents} from \"../utils/types/SocketEvents\";\nimport {ChangeTrackPresetPayload} from \"../utils/types/SocketPayloads\";\nimport * as React from \"react\";\n\nconst ChannelActivator = (props: {\n    numChannels: number;\n    channels: number[];\n    onChange: (channels: number[]) => void;\n}) => {\n    const {numChannels, channels, onChange} = props;\n\n    const enableChannel = useCallback((channelId: number) => {\n        onChange(upsert(channels, channelId));\n    }, [channels]);\n\n    const disableChannel = useCallback((channelId: number) => {\n        onChange(channels.filter(id => id !== channelId));\n    }, [channels]);\n\n    return (\n        <>\n            {Array.from(Array(numChannels).keys()).map(channelId => (\n                <>\n                    <input\n                        id={\"input-\" + channelId}\n                        type=\"checkbox\"\n                        value={channelId}\n                        checked={channels.indexOf(channelId) !== -1}\n                        onChange={e => {\n                            if (e.currentTarget.checked) {\n                                enableChannel(channelId);\n                            } else {\n                                disableChannel(channelId);\n                            }\n                        }}\n                    />\n                    <label htmlFor={\"input-\" + channelId}>{channelId + 1}</label>\n                </>\n            ))}\n        </>\n    )\n};\n\nconst PresetEditor = (props: {\n    soundCard: SoundCard\n}) => {\n    const {soundCard} = props;\n    const {socket, presets} = useStage();\n\n    return (\n        <div>\n            <h3>{soundCard.name}</h3>\n            <ul>\n                <li>\n                    {soundCard.numInputChannels} input channels\n                </li>\n                <li>\n                    {soundCard.numOutputChannels} output channels\n                </li>\n                <li>\n                    {soundCard.sampleRate} Hz sample rate\n                </li>\n            </ul>\n            <ul>\n                <li>\n                    {presets.bySoundCard[soundCard._id] && presets.bySoundCard[soundCard._id].map(id => presets.byId[id]).map(preset => (\n                        <div style={{\n                            border: '1px solid black'\n                        }}>\n                            {preset.name}\n                            <p>\n                                Input:\n                                <ChannelActivator\n                                    numChannels={soundCard.numInputChannels}\n                                    channels={preset.inputChannels}\n                                    onChange={channels => {\n                                        socket.emit(ClientDeviceEvents.CHANGE_TRACK_PRESET, {\n                                            id: preset._id,\n                                            update: {\n                                                inputChannels: channels\n                                            }\n                                        } as ChangeTrackPresetPayload)\n                                    }}\n                                />\n                            </p>\n                            <p>\n                                Output:\n                                <ChannelActivator\n                                    numChannels={soundCard.numOutputChannels}\n                                    channels={preset.outputChannels}\n                                    onChange={channels => {\n                                        socket.emit(ClientDeviceEvents.CHANGE_TRACK_PRESET, {\n                                            id: preset._id,\n                                            update: {\n                                                outputChannels: channels\n                                            }\n                                        } as ChangeTrackPresetPayload)\n                                    }}\n                                />\n                            </p>\n                            <button>Remove Preset</button>\n                        </div>\n                    ))}\n                </li>\n                <button>Add Preset</button>\n            </ul>\n        </div>\n    )\n};\nexport default PresetEditor;\n"]},"metadata":{},"sourceType":"module"}