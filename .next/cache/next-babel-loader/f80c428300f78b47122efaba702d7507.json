{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tobias/Developer/digitalstage/ov-simulator/pages/index.tsx\";\nimport { useEffect } from \"react\";\nimport useAuth from \"../libs/useAuth\";\nimport useStage, { MAC } from \"../libs/useStage\";\nimport SoundCardSimulator from \"../components/SoundCardSimulator\";\nimport PresetEditor from \"../components/PresetEditor\";\nconst email = \"test@digital-stage.org\";\nconst password = \"testtesttest\";\n\nconst Index = () => {\n  const {\n    signInWithEmailAndPassword,\n    token\n  } = useAuth();\n  const {\n    device,\n    soundCards,\n    presets\n  } = useStage();\n  useEffect(() => {\n    // Sign in\n    signInWithEmailAndPassword(email, password);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Usually any ov-client will do the following steps when connecting:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"1.) Get token: \", token ? \"ok\" : \"requesting\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"2.) Identify this Device by it's mac address '\", MAC, \"':\", device ? /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(device, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 31\n        }, this) : \"requesting\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"The ov-client now can update the server about the connected sound cards.\", /*#__PURE__*/_jsxDEV(SoundCardSimulator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Inside the webclient we now have the following entities:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Available sound cards (even if not used by any ov-client):\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: soundCards.allIds.map(id => soundCards.byId[id]).map(soundCard => /*#__PURE__*/_jsxDEV(PresetEditor, {\n            soundCard: soundCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/pages/index.tsx"],"names":["useEffect","useAuth","useStage","MAC","SoundCardSimulator","PresetEditor","email","password","Index","signInWithEmailAndPassword","token","device","soundCards","presets","JSON","stringify","allIds","map","id","byId","soundCard"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,QAAP,IAAkBC,GAAlB,QAA4B,kBAA5B;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,MAAMC,KAAK,GAAG,wBAAd;AACA,MAAMC,QAAQ,GAAG,cAAjB;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAChB,QAAM;AAACC,IAAAA,0BAAD;AAA6BC,IAAAA;AAA7B,MAAsCT,OAAO,EAAnD;AACA,QAAM;AAACU,IAAAA,MAAD;AAASC,IAAAA,UAAT;AAAqBC,IAAAA;AAArB,MAAgCX,QAAQ,EAA9C;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAS,IAAAA,0BAA0B,CAACH,KAAD,EAAQC,QAAR,CAA1B;AACH,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAA,8BACI;AAAA,sCACoBG,KAAK,GAAG,IAAH,GAAU,YADnC;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAA,qEACmDP,GADnD,QAEKQ,MAAM,gBAAG;AAAA,oBAAMG,IAAI,CAACC,SAAL,CAAeJ,MAAf,EAAuB,IAAvB,EAA6B,CAA7B;AAAN;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAkD,YAF7D;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAQI;AAAA,4GAEI,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAiBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBJ,eAoBI;AAAA,6BACI;AAAA,8FAEI;AAAA,oBACKC,UAAU,CAACI,MAAX,CAAkBC,GAAlB,CAAsBC,EAAE,IAAIN,UAAU,CAACO,IAAX,CAAgBD,EAAhB,CAA5B,EAAiDD,GAAjD,CAAqDG,SAAS,iBAC3D,QAAC,YAAD;AAAc,YAAA,SAAS,EAAEA;AAAzB;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH,CA1CD;;AA2CA,eAAeZ,KAAf","sourcesContent":["import {useEffect} from \"react\";\nimport useAuth from \"../libs/useAuth\";\nimport useStage, {MAC} from \"../libs/useStage\";\nimport SoundCardSimulator from \"../components/SoundCardSimulator\";\nimport PresetEditor from \"../components/PresetEditor\";\n\nconst email = \"test@digital-stage.org\";\nconst password = \"testtesttest\";\n\n\nconst Index = () => {\n    const {signInWithEmailAndPassword, token} = useAuth();\n    const {device, soundCards, presets} = useStage();\n\n    useEffect(() => {\n        // Sign in\n        signInWithEmailAndPassword(email, password);\n    }, []);\n\n    return (\n        <div>\n            <p>\n                Usually any ov-client will do the following steps when connecting:\n            </p>\n            <ul>\n                <li>\n                    1.) Get token: {token ? \"ok\" : \"requesting\"}\n                </li>\n                <li>\n                    2.) Identify this Device by it's mac address '{MAC}':\n                    {device ? <pre>{JSON.stringify(device, null, 2)}</pre> : \"requesting\"}\n                </li>\n                <li>\n                    The ov-client now can update the server about the connected sound cards.\n                    <SoundCardSimulator/>\n                </li>\n            </ul>\n            <p>\n                Inside the webclient we now have the following entities:\n            </p>\n            <ul>\n                <li>\n                    Available sound cards (even if not used by any ov-client):\n                    <ul>\n                        {soundCards.allIds.map(id => soundCards.byId[id]).map(soundCard => (\n                            <PresetEditor soundCard={soundCard}/>\n                        ))}\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    )\n};\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}