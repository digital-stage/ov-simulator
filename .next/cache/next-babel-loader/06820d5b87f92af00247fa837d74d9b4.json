{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ServerDeviceEvents } from \"../types/SocketEvents\";\nimport upsert from \"./upsert\";\nimport omit from 'lodash/omit';\n\nfunction TrackReducer(state, action) {\n  switch (action.type) {\n    case ServerDeviceEvents.TRACK_ADDED:\n      {\n        const track = action.payload;\n        return {\n          byId: _objectSpread(_objectSpread({}, state.byId), {}, {\n            [track._id]: track\n          }),\n          bySoundCard: _objectSpread(_objectSpread({}, state.bySoundCard), {}, {\n            [track.soundCardId]: upsert([...state.bySoundCard[track.soundCardId]], track._id)\n          }),\n          byPreset: _objectSpread(_objectSpread({}, state.byPreset), {}, {\n            [track.trackPresetId]: upsert([...state.byPreset[track.trackPresetId]], track._id)\n          }),\n          allIds: upsert(state.allIds, track._id)\n        };\n      }\n\n    case ServerDeviceEvents.TRACK_CHANGED:\n      {\n        const track = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          byId: _objectSpread(_objectSpread({}, state.byId), {}, {\n            [track._id]: _objectSpread(_objectSpread({}, state.byId[track._id]), track)\n          })\n        });\n      }\n\n    case ServerDeviceEvents.TRACK_REMOVED:\n      {\n        const removedId = action.payload;\n        const track = state.byId[removedId];\n        return _objectSpread(_objectSpread({}, state), {}, {\n          byId: omit(state.byId, removedId),\n          bySoundCard: _objectSpread(_objectSpread({}, state.bySoundCard), {}, {\n            [track.soundCardId]: state.bySoundCard[track.soundCardId].filter(id => id !== removedId)\n          }),\n          byPreset: _objectSpread(_objectSpread({}, state.byPreset), {}, {\n            [track.trackPresetId]: state.byPreset[track.trackPresetId].filter(id => id !== removedId)\n          }),\n          allIds: state.allIds.filter(id => id !== removedId)\n        });\n      }\n\n    default:\n      throw new Error();\n  }\n}\n\nexport default TrackReducer;","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/utils/reducers/TrackReducer.ts"],"names":["ServerDeviceEvents","upsert","omit","TrackReducer","state","action","type","TRACK_ADDED","track","payload","byId","_id","bySoundCard","soundCardId","byPreset","trackPresetId","allIds","TRACK_CHANGED","TRACK_REMOVED","removedId","filter","id","Error"],"mappings":";;;;;;AAAA,SAAQA,kBAAR,QAAiC,uBAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAsBA,SAASC,YAAT,CAAsBC,KAAtB,EAAqCC,MAArC,EAAkE;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,kBAAkB,CAACO,WAAxB;AAAqC;AACjC,cAAMC,KAAY,GAAGH,MAAM,CAACI,OAA5B;AACA,eAAO;AACHC,UAAAA,IAAI,kCACGN,KAAK,CAACM,IADT;AAEA,aAACF,KAAK,CAACG,GAAP,GAAaH;AAFb,YADD;AAKHI,UAAAA,WAAW,kCACJR,KAAK,CAACQ,WADF;AAEP,aAACJ,KAAK,CAACK,WAAP,GAAqBZ,MAAM,CAAS,CAAC,GAAGG,KAAK,CAACQ,WAAN,CAAkBJ,KAAK,CAACK,WAAxB,CAAJ,CAAT,EAAoDL,KAAK,CAACG,GAA1D;AAFpB,YALR;AASHG,UAAAA,QAAQ,kCACDV,KAAK,CAACU,QADL;AAEJ,aAACN,KAAK,CAACO,aAAP,GAAuBd,MAAM,CAAS,CAAC,GAAGG,KAAK,CAACU,QAAN,CAAeN,KAAK,CAACO,aAArB,CAAJ,CAAT,EAAmDP,KAAK,CAACG,GAAzD;AAFzB,YATL;AAaHK,UAAAA,MAAM,EAAEf,MAAM,CAASG,KAAK,CAACY,MAAf,EAAuBR,KAAK,CAACG,GAA7B;AAbX,SAAP;AAeH;;AACD,SAAKX,kBAAkB,CAACiB,aAAxB;AAAuC;AACnC,cAAMT,KAAY,GAAGH,MAAM,CAACI,OAA5B;AACA,+CACOL,KADP;AAEIM,UAAAA,IAAI,kCACGN,KAAK,CAACM,IADT;AAEA,aAACF,KAAK,CAACG,GAAP,mCACOP,KAAK,CAACM,IAAN,CAAWF,KAAK,CAACG,GAAjB,CADP,GAEOH,KAFP;AAFA;AAFR;AAUH;;AACD,SAAKR,kBAAkB,CAACkB,aAAxB;AAAuC;AACnC,cAAMC,SAAiB,GAAGd,MAAM,CAACI,OAAjC;AACA,cAAMD,KAAY,GAAGJ,KAAK,CAACM,IAAN,CAAWS,SAAX,CAArB;AACA,+CACOf,KADP;AAEIM,UAAAA,IAAI,EAAER,IAAI,CAACE,KAAK,CAACM,IAAP,EAAaS,SAAb,CAFd;AAGIP,UAAAA,WAAW,kCACJR,KAAK,CAACQ,WADF;AAEP,aAACJ,KAAK,CAACK,WAAP,GAAqBT,KAAK,CAACQ,WAAN,CAAkBJ,KAAK,CAACK,WAAxB,EAAqCO,MAArC,CAA4CC,EAAE,IAAIA,EAAE,KAAKF,SAAzD;AAFd,YAHf;AAOIL,UAAAA,QAAQ,kCACDV,KAAK,CAACU,QADL;AAEJ,aAACN,KAAK,CAACO,aAAP,GAAuBX,KAAK,CAACU,QAAN,CAAeN,KAAK,CAACO,aAArB,EAAoCK,MAApC,CAA2CC,EAAE,IAAIA,EAAE,KAAKF,SAAxD;AAFnB,YAPZ;AAWIH,UAAAA,MAAM,EAAEZ,KAAK,CAACY,MAAN,CAAaI,MAAb,CAAoBC,EAAE,IAAIA,EAAE,KAAKF,SAAjC;AAXZ;AAaH;;AACD;AACI,YAAM,IAAIG,KAAJ,EAAN;AAlDR;AAoDH;;AAED,eAAenB,YAAf","sourcesContent":["import {ServerDeviceEvents} from \"../types/SocketEvents\";\nimport upsert from \"./upsert\";\nimport omit from 'lodash/omit';\nimport {TrackPreset} from \"../types/TrackPreset\";\nimport {Track} from \"../types/Track\";\n\nexport type TrackAction =\n    { type: ServerDeviceEvents.TRACK_ADDED, payload: Track }\n    | { type: ServerDeviceEvents.TRACK_CHANGED, payload: Track }\n    | { type: ServerDeviceEvents.TRACK_REMOVED, payload: string };\n\nexport interface Tracks {\n    byId: {\n        [id: string]: Track\n    }\n    bySoundCard: {\n        [soundCardId: string]: string[]\n    },\n    byPreset: {\n        [trackPresetId: string]: string[]\n    }\n    allIds: string[]\n}\n\nfunction TrackReducer(state: Tracks, action: TrackAction): Tracks {\n    switch (action.type) {\n        case ServerDeviceEvents.TRACK_ADDED: {\n            const track: Track = action.payload;\n            return {\n                byId: {\n                    ...state.byId,\n                    [track._id]: track\n                },\n                bySoundCard: {\n                    ...state.bySoundCard,\n                    [track.soundCardId]: upsert<string>([...state.bySoundCard[track.soundCardId]], track._id),\n                },\n                byPreset: {\n                    ...state.byPreset,\n                    [track.trackPresetId]: upsert<string>([...state.byPreset[track.trackPresetId]], track._id),\n                },\n                allIds: upsert<string>(state.allIds, track._id)\n            }\n        }\n        case ServerDeviceEvents.TRACK_CHANGED: {\n            const track: Track = action.payload;\n            return {\n                ...state,\n                byId: {\n                    ...state.byId,\n                    [track._id]: {\n                        ...state.byId[track._id],\n                        ...track\n                    }\n                }\n            }\n        }\n        case ServerDeviceEvents.TRACK_REMOVED: {\n            const removedId: string = action.payload;\n            const track: Track = state.byId[removedId];\n            return {\n                ...state,\n                byId: omit(state.byId, removedId),\n                bySoundCard: {\n                    ...state.bySoundCard,\n                    [track.soundCardId]: state.bySoundCard[track.soundCardId].filter(id => id !== removedId)\n                },\n                byPreset: {\n                    ...state.byPreset,\n                    [track.trackPresetId]: state.byPreset[track.trackPresetId].filter(id => id !== removedId)\n                },\n                allIds: state.allIds.filter(id => id !== removedId)\n            }\n        }\n        default:\n            throw new Error();\n    }\n}\n\nexport default TrackReducer;\n"]},"metadata":{},"sourceType":"module"}