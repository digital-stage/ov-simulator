{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ServerStageEvents } from \"../types/SocketEvents\";\nimport upsert from \"./upsert\";\nimport omit from 'lodash/omit';\n\nfunction GroupReducer(state, action) {\n  switch (action.type) {\n    case ServerStageEvents.GROUP_ADDED:\n      {\n        const group = action.payload;\n        return {\n          byId: _objectSpread(_objectSpread({}, state.byId), {}, {\n            [group._id]: group\n          }),\n          byStage: _objectSpread(_objectSpread({}, state.byStage), {}, {\n            [group.stageId]: upsert(state.byStage[group.stageId] || [], group._id)\n          }),\n          allIds: upsert(state.allIds, group._id)\n        };\n      }\n\n    case ServerStageEvents.GROUP_CHANGED:\n      {\n        const group = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          byId: _objectSpread(_objectSpread({}, state.byId), {}, {\n            [group._id]: _objectSpread(_objectSpread({}, state.byId[group._id]), group)\n          })\n        });\n      }\n\n    case ServerStageEvents.GROUP_REMOVED:\n      {\n        const removedId = action.payload;\n        const group = state.byId[removedId];\n        if (!group) return state;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          byId: omit(state.byId, removedId),\n          byStage: _objectSpread(_objectSpread({}, state.byStage), {}, {\n            [group.stageId]: state.byStage[group.stageId].filter(id => id !== removedId)\n          }),\n          allIds: state.allIds.filter(id => id !== removedId)\n        });\n      }\n\n    default:\n      throw new Error(\"Unsupported event: \" + action);\n  }\n}\n\nexport default GroupReducer;","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/utils/reducers/GroupReducer.ts"],"names":["ServerStageEvents","upsert","omit","GroupReducer","state","action","type","GROUP_ADDED","group","payload","byId","_id","byStage","stageId","allIds","GROUP_CHANGED","GROUP_REMOVED","removedId","filter","id","Error"],"mappings":";;;;;;AACA,SAAQA,iBAAR,QAAgC,uBAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAkBA,SAASC,YAAT,CAAsBC,KAAtB,EAAqCC,MAArC,EAAkE;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,iBAAiB,CAACO,WAAvB;AAAoC;AAChC,cAAMC,KAAY,GAAGH,MAAM,CAACI,OAA5B;AACA,eAAO;AACHC,UAAAA,IAAI,kCACGN,KAAK,CAACM,IADT;AAEA,aAACF,KAAK,CAACG,GAAP,GAAaH;AAFb,YADD;AAKHI,UAAAA,OAAO,kCACAR,KAAK,CAACQ,OADN;AAEH,aAACJ,KAAK,CAACK,OAAP,GAAiBZ,MAAM,CAASG,KAAK,CAACQ,OAAN,CAAcJ,KAAK,CAACK,OAApB,KAAgC,EAAzC,EAA6CL,KAAK,CAACG,GAAnD;AAFpB,YALJ;AASHG,UAAAA,MAAM,EAAEb,MAAM,CAASG,KAAK,CAACU,MAAf,EAAuBN,KAAK,CAACG,GAA7B;AATX,SAAP;AAWH;;AACD,SAAKX,iBAAiB,CAACe,aAAvB;AAAsC;AAClC,cAAMP,KAAY,GAAGH,MAAM,CAACI,OAA5B;AACA,+CACOL,KADP;AAEIM,UAAAA,IAAI,kCACGN,KAAK,CAACM,IADT;AAEA,aAACF,KAAK,CAACG,GAAP,mCACOP,KAAK,CAACM,IAAN,CAAWF,KAAK,CAACG,GAAjB,CADP,GAEOH,KAFP;AAFA;AAFR;AAUH;;AACD,SAAKR,iBAAiB,CAACgB,aAAvB;AAAsC;AAClC,cAAMC,SAAiB,GAAGZ,MAAM,CAACI,OAAjC;AACA,cAAMD,KAAY,GAAGJ,KAAK,CAACM,IAAN,CAAWO,SAAX,CAArB;AACA,YAAI,CAACT,KAAL,EACI,OAAOJ,KAAP;AACJ,+CACOA,KADP;AAEIM,UAAAA,IAAI,EAAER,IAAI,CAACE,KAAK,CAACM,IAAP,EAAaO,SAAb,CAFd;AAGIL,UAAAA,OAAO,kCACAR,KAAK,CAACQ,OADN;AAEH,aAACJ,KAAK,CAACK,OAAP,GAAiBT,KAAK,CAACQ,OAAN,CAAcJ,KAAK,CAACK,OAApB,EAA6BK,MAA7B,CAAoCC,EAAE,IAAIA,EAAE,KAAKF,SAAjD;AAFd,YAHX;AAOIH,UAAAA,MAAM,EAAEV,KAAK,CAACU,MAAN,CAAaI,MAAb,CAAoBC,EAAE,IAAIA,EAAE,KAAKF,SAAjC;AAPZ;AASH;;AACD;AACI,YAAM,IAAIG,KAAJ,CAAU,wBAAwBf,MAAlC,CAAN;AA5CR;AA8CH;;AAED,eAAeF,YAAf","sourcesContent":["\nimport {ServerStageEvents} from \"../types/SocketEvents\";\nimport upsert from \"./upsert\";\nimport omit from 'lodash/omit';\nimport {Group} from \"../types/Group\";\n\nexport type GroupAction =\n    { type: ServerStageEvents.GROUP_ADDED, payload: Group }\n    | { type: ServerStageEvents.GROUP_CHANGED, payload: Group }\n    | { type: ServerStageEvents.GROUP_REMOVED, payload: string };\n\nexport interface Groups {\n    byId: {\n        [id: string]: Group\n    },\n    byStage: {\n        [stageId: string]: string[]\n    },\n    allIds: string[]\n}\n\nfunction GroupReducer(state: Groups, action: GroupAction): Groups {\n    switch (action.type) {\n        case ServerStageEvents.GROUP_ADDED: {\n            const group: Group = action.payload;\n            return {\n                byId: {\n                    ...state.byId,\n                    [group._id]: group\n                },\n                byStage: {\n                    ...state.byStage,\n                    [group.stageId]: upsert<string>(state.byStage[group.stageId] || [], group._id),\n                },\n                allIds: upsert<string>(state.allIds, group._id)\n            }\n        }\n        case ServerStageEvents.GROUP_CHANGED: {\n            const group: Group = action.payload;\n            return {\n                ...state,\n                byId: {\n                    ...state.byId,\n                    [group._id]: {\n                        ...state.byId[group._id],\n                        ...group\n                    }\n                }\n            }\n        }\n        case ServerStageEvents.GROUP_REMOVED: {\n            const removedId: string = action.payload;\n            const group: Group = state.byId[removedId];\n            if (!group)\n                return state;\n            return {\n                ...state,\n                byId: omit(state.byId, removedId),\n                byStage: {\n                    ...state.byStage,\n                    [group.stageId]: state.byStage[group.stageId].filter(id => id !== removedId)\n                },\n                allIds: state.allIds.filter(id => id !== removedId)\n            }\n        }\n        default:\n            throw new Error(\"Unsupported event: \" + action);\n    }\n}\n\nexport default GroupReducer;\n"]},"metadata":{},"sourceType":"module"}