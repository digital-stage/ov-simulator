{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tobias/Developer/digitalstage/ov-simulator/components/PresetEditor.tsx\";\nimport useStage from \"../libs/useStage\";\nimport { useCallback } from \"react\";\nimport upsert from \"../utils/upsert\";\nimport { ClientDeviceEvents } from \"../utils/types/SocketEvents\";\nimport * as React from \"react\";\n\nconst ChannelActivator = props => {\n  const {\n    numChannels,\n    channels,\n    onChange\n  } = props;\n  const enableChannel = useCallback(channelId => {\n    onChange(upsert(channels, channelId));\n  }, [channels]);\n  const disableChannel = useCallback(channelId => {\n    onChange(channels.filter(id => id !== channelId));\n  }, [channels]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Array.from(Array(numChannels).keys()).map(channelId => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input-\" + channelId,\n        type: \"checkbox\",\n        value: channelId,\n        checked: channels.indexOf(channelId) !== -1,\n        onChange: e => {\n          if (e.currentTarget.checked) {\n            enableChannel(channelId);\n          } else {\n            disableChannel(channelId);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"input-\" + channelId,\n        children: channelId + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true))\n  }, void 0, false);\n};\n\nconst PresetEditor = props => {\n  const {\n    soundCard\n  } = props;\n  const {\n    socket,\n    presets\n  } = useStage();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: soundCard.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.numInputChannels, \" input channels\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.numOutputChannels, \" output channels\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.sampleRate, \" Hz sample rate\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Presets:\", presets.bySoundCard[soundCard._id] && presets.bySoundCard[soundCard._id].map(id => presets.byId[id]).map(preset => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            border: '1px solid black'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            style: {\n              margin: 0\n            },\n            children: preset.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              margin: 0\n            },\n            children: [\"Input:\", /*#__PURE__*/_jsxDEV(ChannelActivator, {\n              numChannels: soundCard.numInputChannels,\n              channels: preset.inputChannels,\n              onChange: channels => {\n                socket.emit(ClientDeviceEvents.CHANGE_TRACK_PRESET, {\n                  id: preset._id,\n                  update: {\n                    inputChannels: channels\n                  }\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Output:\", /*#__PURE__*/_jsxDEV(ChannelActivator, {\n              numChannels: soundCard.numOutputChannels,\n              channels: preset.outputChannels,\n              onChange: channels => {\n                socket.emit(ClientDeviceEvents.CHANGE_TRACK_PRESET, {\n                  id: preset._id,\n                  update: {\n                    outputChannels: channels\n                  }\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'right'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Remove Preset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Preset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\nexport default PresetEditor;","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/components/PresetEditor.tsx"],"names":["useStage","useCallback","upsert","ClientDeviceEvents","React","ChannelActivator","props","numChannels","channels","onChange","enableChannel","channelId","disableChannel","filter","id","Array","from","keys","map","indexOf","e","currentTarget","checked","PresetEditor","soundCard","socket","presets","name","numInputChannels","numOutputChannels","sampleRate","bySoundCard","_id","byId","preset","border","margin","inputChannels","emit","CHANGE_TRACK_PRESET","update","outputChannels","textAlign"],"mappings":"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","sourcesContent":["import {SoundCard} from \"../utils/types/SoundCard\";\nimport useStage from \"../libs/useStage\";\nimport {useCallback} from \"react\";\nimport upsert from \"../utils/upsert\";\nimport {ClientDeviceEvents} from \"../utils/types/SocketEvents\";\nimport {ChangeTrackPresetPayload} from \"../utils/types/SocketPayloads\";\nimport * as React from \"react\";\n\nconst ChannelActivator = (props: {\n    numChannels: number;\n    channels: number[];\n    onChange: (channels: number[]) => void;\n}) => {\n    const {numChannels, channels, onChange} = props;\n\n    const enableChannel = useCallback((channelId: number) => {\n        onChange(upsert(channels, channelId));\n    }, [channels]);\n\n    const disableChannel = useCallback((channelId: number) => {\n        onChange(channels.filter(id => id !== channelId));\n    }, [channels]);\n\n    return (\n        <>\n            {Array.from(Array(numChannels).keys()).map(channelId => (\n                <>\n                    <input\n                        id={\"input-\" + channelId}\n                        type=\"checkbox\"\n                        value={channelId}\n                        checked={channels.indexOf(channelId) !== -1}\n                        onChange={e => {\n                            if (e.currentTarget.checked) {\n                                enableChannel(channelId);\n                            } else {\n                                disableChannel(channelId);\n                            }\n                        }}\n                    />\n                    <label htmlFor={\"input-\" + channelId}>{channelId + 1}</label>\n                </>\n            ))}\n        </>\n    )\n};\n\nconst PresetEditor = (props: {\n    soundCard: SoundCard\n}) => {\n    const {soundCard} = props;\n    const {socket, presets} = useStage();\n\n    return (\n        <div>\n            <h3>{soundCard.name}</h3>\n            <ul>\n                <li>\n                    {soundCard.numInputChannels} input channels\n                </li>\n                <li>\n                    {soundCard.numOutputChannels} output channels\n                </li>\n                <li>\n                    {soundCard.sampleRate} Hz sample rate\n                </li>\n            </ul>\n            <ul>\n                <li>\n                    Presets:\n                    {presets.bySoundCard[soundCard._id] && presets.bySoundCard[soundCard._id].map(id => presets.byId[id]).map(preset => (\n                        <div style={{\n                            border: '1px solid black'\n                        }}>\n                            <h5 style={{\n                                margin: 0\n                            }}>\n                                {preset.name}\n                            </h5>\n                            <p style={{\n                                margin: 0\n                            }}>\n                                Input:\n                                <ChannelActivator\n                                    numChannels={soundCard.numInputChannels}\n                                    channels={preset.inputChannels}\n                                    onChange={channels => {\n                                        socket.emit(ClientDeviceEvents.CHANGE_TRACK_PRESET, {\n                                            id: preset._id,\n                                            update: {\n                                                inputChannels: channels\n                                            }\n                                        } as ChangeTrackPresetPayload)\n                                    }}\n                                />\n                            </p>\n                            <span>\n                                Output:\n                                <ChannelActivator\n                                    numChannels={soundCard.numOutputChannels}\n                                    channels={preset.outputChannels}\n                                    onChange={channels => {\n                                        socket.emit(ClientDeviceEvents.CHANGE_TRACK_PRESET, {\n                                            id: preset._id,\n                                            update: {\n                                                outputChannels: channels\n                                            }\n                                        } as ChangeTrackPresetPayload)\n                                    }}\n                                />\n                            </span>\n                            <div style={{\n                                textAlign: 'right'\n                            }}>\n                                <button>Remove Preset</button>\n                            </div>\n                        </div>\n                    ))}\n                </li>\n                <button>Add Preset</button>\n            </ul>\n        </div>\n    )\n};\nexport default PresetEditor;\n"]},"metadata":{},"sourceType":"module"}