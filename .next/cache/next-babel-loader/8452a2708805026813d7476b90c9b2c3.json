{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tobias/Developer/digitalstage/ov-simulator/components/PresetEditor.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport useStage from \"../libs/useStage\";\nimport { useCallback } from \"react\";\n\nvar ChannelActivator = function ChannelActivator(props) {\n  _s();\n\n  var numChannels = props.numChannels,\n      channels = props.channels;\n  var handleChange = useCallback(function () {}, [channels]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input-\" + channelId,\n      type: \"checkbox\",\n      value: channelId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"input-\" + channelId,\n      children: channelId + 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(ChannelActivator, \"y/H5GIiu8jog9Hni7mlqNguo+do=\");\n\n_c = ChannelActivator;\n\nvar PresetEditor = function PresetEditor(props) {\n  _s2();\n\n  var soundCard = props.soundCard;\n\n  var _useStage = useStage(),\n      presets = _useStage.presets;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: soundCard.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.numInputChannels, \" input channels\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.numOutputChannels, \" output channels\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.sampleRate, \" Hz sample rate\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: presets.bySoundCard[soundCard._id] && presets.bySoundCard[soundCard._id].map(function (id) {\n          return presets.byId[id];\n        }).map(function (preset) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [preset.name, /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Input:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: Array.from(Array(soundCard.numInputChannels).keys()).map(function (channelId) {\n                    return /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        id: \"input-\" + channelId,\n                        type: \"checkbox\",\n                        value: channelId\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 55,\n                        columnNumber: 49\n                      }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"input-\" + channelId,\n                        children: channelId + 1\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 56,\n                        columnNumber: 49\n                      }, _this)]\n                    }, void 0, true);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 37\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 33\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Output:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: Array.from(Array(soundCard.numOutputChannels).keys()).map(function (channelId) {\n                    return /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        id: \"output-\" + channelId,\n                        type: \"checkbox\",\n                        value: channelId\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 68,\n                        columnNumber: 49\n                      }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"output-\" + channelId,\n                        children: channelId + 1\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 69,\n                        columnNumber: 49\n                      }, _this)]\n                    }, void 0, true);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 37\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 33\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, _this);\n};\n\n_s2(PresetEditor, \"ZI+ANa380MXm61R17YTaLh5v+Wc=\", false, function () {\n  return [useStage];\n});\n\n_c2 = PresetEditor;\nexport default PresetEditor;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChannelActivator\");\n$RefreshReg$(_c2, \"PresetEditor\");","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/components/PresetEditor.tsx"],"names":["useStage","useCallback","ChannelActivator","props","numChannels","channels","handleChange","channelId","PresetEditor","soundCard","presets","name","numInputChannels","numOutputChannels","sampleRate","bySoundCard","_id","map","id","byId","preset","Array","from","keys"],"mappings":"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","sourcesContent":["import {SoundCard} from \"../utils/types/SoundCard\";\nimport useStage from \"../libs/useStage\";\nimport {useCallback} from \"react\";\n\nconst ChannelActivator = (props: {\n    numChannels: number;\n    channels: number[];\n    onChange: (channels: number[]) => void;\n}) => {\n    const {numChannels, channels} = props;\n\n    const handleChange = useCallback(() => {\n\n    }, [channels]);\n\n    return (\n        <>\n            <input id={\"input-\" + channelId} type=\"checkbox\" value={channelId}/>\n            <label htmlFor={\"input-\" + channelId}>{channelId + 1}</label>\n        </>\n    )\n};\n\nconst PresetEditor = (props: {\n    soundCard: SoundCard\n}) => {\n    const {soundCard} = props;\n    const {presets} = useStage();\n\n    return (\n        <div>\n            <h3>{soundCard.name}</h3>\n            <ul>\n                <li>\n                    {soundCard.numInputChannels} input channels\n                </li>\n                <li>\n                    {soundCard.numOutputChannels} output channels\n                </li>\n                <li>\n                    {soundCard.sampleRate} Hz sample rate\n                </li>\n            </ul>\n            <ul>\n                <li>\n                    {presets.bySoundCard[soundCard._id] && presets.bySoundCard[soundCard._id].map(id => presets.byId[id]).map(preset => (\n                        <div>\n                            {preset.name}\n                            <p>\n                                Input:\n                                <ul>\n                                    <li>\n                                        {Array.from(Array(soundCard.numInputChannels).keys()).map((channelId) => (\n                                            <>\n                                                <input id={\"input-\" + channelId} type=\"checkbox\" value={channelId}/>\n                                                <label htmlFor={\"input-\" + channelId}>{channelId + 1}</label>\n                                            </>\n                                        ))}\n                                    </li>\n                                </ul>\n                            </p>\n                            <p>\n                                Output:\n                                <ul>\n                                    <li>\n                                        {Array.from(Array(soundCard.numOutputChannels).keys()).map((channelId) => (\n                                            <>\n                                                <input id={\"output-\" + channelId} type=\"checkbox\" value={channelId}/>\n                                                <label htmlFor={\"output-\" + channelId}>{channelId + 1}</label>\n                                            </>\n                                        ))}\n                                    </li>\n                                </ul>\n                            </p>\n                        </div>\n                    ))}\n                </li>\n            </ul>\n        </div>\n    )\n};\nexport default PresetEditor;\n"]},"metadata":{},"sourceType":"module"}