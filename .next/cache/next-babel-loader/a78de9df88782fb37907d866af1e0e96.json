{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tobias/Developer/digitalstage/ov-simulator/components/SoundCardSimulator.tsx\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { ClientDeviceEvents } from \"../utils/types/SocketEvents\";\nimport useStage from \"../libs/useStage\";\n\nconst AddSoundCardForm = () => {\n  const {\n    socket\n  } = useStage();\n  const nameRef = useRef();\n  const numInputChannelsRef = useRef();\n  const numOutputChannelsRef = useRef();\n  const addSoundCard = useCallback(() => {\n    if (nameRef.current && numOutputChannelsRef.current && numInputChannelsRef.current && socket) {\n      const name = nameRef.current.value;\n      const numInputChannels = parseInt(numInputChannelsRef.current.value);\n      const numOutputChannels = parseInt(numOutputChannelsRef.current.value);\n      const payload = {\n        initial: {\n          name: name,\n          driver: 'ALSA',\n          numInputChannels,\n          numOutputChannels,\n          sampleRate: 44100,\n          periodSize: 2,\n          numPeriods: 2\n        }\n      };\n      socket.emit(ClientDeviceEvents.ADD_SOUND_CARD, payload);\n    }\n  }, [socket, nameRef, numInputChannelsRef, numOutputChannelsRef]);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"name\",\n      ref: nameRef,\n      minLength: 1,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      ref: numInputChannelsRef,\n      min: 0,\n      max: 8,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      ref: numOutputChannelsRef,\n      min: 0,\n      max: 8,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: e => {\n        e.preventDefault();\n        addSoundCard();\n      },\n      children: \"ADD SOUNDCARD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\nconst SoundCardSimulator = () => {\n  const {\n    device,\n    socket,\n    soundCards\n  } = useStage();\n  const {\n    0: connectedSoundCardIds,\n    1: setConnectedSoundCardIds\n  } = useState([]);\n  useEffect(() => {\n    if (device) {\n      setConnectedSoundCardIds(device.soundCardIds);\n    }\n  }, [device]);\n  const updateConnectedSoundCardIds = useCallback(soundCardIds => {\n    if (socket && device) {\n      console.log(soundCardIds);\n      socket.emit(ClientDeviceEvents.UPDATE_DEVICE, {\n        _id: device._id,\n        soundCardIds: soundCardIds\n      });\n    }\n  }, [socket, device]);\n  const removeSoundCard = useCallback(id => {\n    if (socket) {\n      socket.emit(ClientDeviceEvents.REMOVE_SOUND_CARD, id);\n    }\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(AddSoundCardForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: soundCards.allIds.map(id => soundCards.byId[id]).map(soundCard => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: soundCard._id,\n          children: soundCard.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: soundCard._id,\n          type: \"checkbox\",\n          onChange: e => {\n            if (e.currentTarget.checked) {\n              updateConnectedSoundCardIds([...connectedSoundCardIds, soundCard._id]);\n            } else {\n              updateConnectedSoundCardIds(connectedSoundCardIds.filter(id => id !== soundCard._id));\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => removeSoundCard(soundCard._id),\n          children: \"DEL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\nexport default SoundCardSimulator;","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/components/SoundCardSimulator.tsx"],"names":["useCallback","useEffect","useRef","useState","ClientDeviceEvents","useStage","AddSoundCardForm","socket","nameRef","numInputChannelsRef","numOutputChannelsRef","addSoundCard","current","name","value","numInputChannels","parseInt","numOutputChannels","payload","initial","driver","sampleRate","periodSize","numPeriods","emit","ADD_SOUND_CARD","e","preventDefault","SoundCardSimulator","device","soundCards","connectedSoundCardIds","setConnectedSoundCardIds","soundCardIds","updateConnectedSoundCardIds","console","log","UPDATE_DEVICE","_id","removeSoundCard","id","REMOVE_SOUND_CARD","allIds","map","byId","soundCard","currentTarget","checked","filter"],"mappings":"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","sourcesContent":["import {useCallback, useEffect, useRef, useState} from \"react\";\nimport ITeckosClient from \"teckos-client/dist/ITeckosClient\";\nimport {ClientDeviceEvents} from \"../utils/types/SocketEvents\";\nimport {Device} from \"../utils/types/Device\";\nimport {AddSoundCardPayload} from \"../utils/types/SocketPayloads\";\nimport {SoundCard} from \"../utils/types/SoundCard\";\nimport useStage from \"../libs/useStage\";\n\nconst AddSoundCardForm = () => {\n    const {socket} = useStage();\n    const nameRef = useRef<HTMLInputElement>();\n    const numInputChannelsRef = useRef<HTMLInputElement>();\n    const numOutputChannelsRef = useRef<HTMLInputElement>();\n\n    const addSoundCard = useCallback(() => {\n        if (nameRef.current && numOutputChannelsRef.current && numInputChannelsRef.current && socket) {\n            const name = nameRef.current.value;\n            const numInputChannels = parseInt(numInputChannelsRef.current.value);\n            const numOutputChannels = parseInt(numOutputChannelsRef.current.value);\n            const payload: AddSoundCardPayload = {\n                initial: {\n                    name: name,\n                    driver: 'ALSA',\n                    numInputChannels,\n                    numOutputChannels,\n                    sampleRate: 44100,\n                    periodSize: 2,\n                    numPeriods: 2\n                }\n            };\n            socket.emit(ClientDeviceEvents.ADD_SOUND_CARD, payload);\n        }\n    }, [socket, nameRef, numInputChannelsRef, numOutputChannelsRef])\n\n    return (\n        <form>\n            <input type=\"name\" ref={nameRef} minLength={1} required/>\n            <input type=\"number\" ref={numInputChannelsRef} min={0} max={8} required/>\n            <input type=\"number\" ref={numOutputChannelsRef} min={0} max={8} required/>\n            <button type=\"submit\" onClick={(e) => {\n                e.preventDefault();\n                addSoundCard();\n            }}>\n                ADD SOUNDCARD\n            </button>\n        </form>\n    )\n};\n\nconst SoundCardSimulator = () => {\n    const {device, socket, soundCards} = useStage();\n    const [connectedSoundCardIds, setConnectedSoundCardIds] = useState<string[]>([]);\n\n    useEffect(() => {\n        if (device) {\n            setConnectedSoundCardIds(device.soundCardIds);\n        }\n    }, [device]);\n\n    const updateConnectedSoundCardIds = useCallback((soundCardIds: string[]) => {\n        if (socket && device) {\n            console.log(soundCardIds);\n            socket.emit(ClientDeviceEvents.UPDATE_DEVICE, {\n                _id: device._id,\n                soundCardIds: soundCardIds\n            });\n        }\n    }, [socket, device]);\n\n    const removeSoundCard = useCallback((id: string) => {\n        if (socket) {\n            socket.emit(ClientDeviceEvents.REMOVE_SOUND_CARD, id);\n        }\n    }, [socket])\n\n    return (\n        <>\n            <p>\n                <AddSoundCardForm/>\n            </p>\n            <ul>\n                {soundCards.allIds.map(id => soundCards.byId[id]).map(soundCard => (\n                    <li>\n                        <label htmlFor={soundCard._id}>{soundCard.name}</label>\n                        <input\n                            id={soundCard._id}\n                            type=\"checkbox\"\n                            onChange={e => {\n                                if (e.currentTarget.checked) {\n                                    updateConnectedSoundCardIds([...connectedSoundCardIds, soundCard._id]);\n                                } else {\n                                    updateConnectedSoundCardIds(connectedSoundCardIds.filter(id => id !== soundCard._id));\n                                }\n                            }}\n                        />\n                        <button onClick={() => removeSoundCard(soundCard._id)}>\n                            DEL\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </>\n    )\n};\nexport default SoundCardSimulator;\n"]},"metadata":{},"sourceType":"module"}