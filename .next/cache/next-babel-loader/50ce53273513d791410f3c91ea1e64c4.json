{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tobias/Developer/digitalstage/ov-simulator/components/PresetEditor.tsx\";\nimport useStage from \"../libs/useStage\";\nimport { useCallback } from \"react\";\nimport indexOf from 'lodash/indexOf';\n\nconst upsert = (arr, value) => {\n  if (!arr) {\n    return [value];\n  }\n\n  if (indexOf(arr, value) === -1) {\n    return [...arr, value];\n  }\n\n  return [...arr];\n};\n\nconst ChannelActivator = props => {\n  const {\n    numChannels,\n    channels,\n    onChange\n  } = props;\n  const enableChannel = useCallback(channelId => {\n    onChange(upsert(channels, channelId));\n  }, [channels]);\n  const disableChannel = useCallback(channelId => {\n    onChange(channels.filter(id => id !== channelId));\n  }, [channels]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Array.from(Array(numChannels).keys()).map(channelId => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input-\" + channelId,\n        type: \"checkbox\",\n        value: channelId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"input-\" + channelId,\n        children: channelId + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true))\n  }, void 0, false);\n};\n\nconst PresetEditor = props => {\n  const {\n    soundCard\n  } = props;\n  const {\n    presets\n  } = useStage();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: soundCard.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.numInputChannels, \" input channels\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.numOutputChannels, \" output channels\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [soundCard.sampleRate, \" Hz sample rate\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: presets.bySoundCard[soundCard._id] && presets.bySoundCard[soundCard._id].map(id => presets.byId[id]).map(preset => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [preset.name, /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Input:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: Array.from(Array(soundCard.numInputChannels).keys()).map(channelId => /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    id: \"input-\" + channelId,\n                    type: \"checkbox\",\n                    value: channelId\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: \"input-\" + channelId,\n                    children: channelId + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 76,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Output:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: Array.from(Array(soundCard.numOutputChannels).keys()).map(channelId => /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    id: \"output-\" + channelId,\n                    type: \"checkbox\",\n                    value: channelId\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 88,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: \"output-\" + channelId,\n                    children: channelId + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 89,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\nexport default PresetEditor;","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/components/PresetEditor.tsx"],"names":["useStage","useCallback","indexOf","upsert","arr","value","ChannelActivator","props","numChannels","channels","onChange","enableChannel","channelId","disableChannel","filter","id","Array","from","keys","map","PresetEditor","soundCard","presets","name","numInputChannels","numOutputChannels","sampleRate","bySoundCard","_id","byId","preset"],"mappings":"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","sourcesContent":["import {SoundCard} from \"../utils/types/SoundCard\";\nimport useStage from \"../libs/useStage\";\nimport {useCallback} from \"react\";\nimport indexOf from 'lodash/indexOf';\n\nconst upsert = <T>(arr: Readonly<T[]>, value: T): T[] => {\n    if (!arr) {\n        return [value];\n    }\n    if (indexOf<T>(arr, value) === -1) {\n        return [...arr, value];\n    }\n    return [...arr];\n};\n\nconst ChannelActivator = (props: {\n    numChannels: number;\n    channels: number[];\n    onChange: (channels: number[]) => void;\n}) => {\n    const {numChannels, channels, onChange} = props;\n\n    const enableChannel = useCallback((channelId: number) => {\n        onChange(upsert(channels, channelId));\n    }, [channels]);\n\n    const disableChannel = useCallback((channelId: number) => {\n        onChange(channels.filter(id => id !== channelId));\n    }, [channels]);\n\n    return (\n        <>\n            {Array.from(Array(numChannels).keys()).map(channelId => (\n                <>\n\n                    <input id={\"input-\" + channelId} type=\"checkbox\" value={channelId}/>\n                    <label htmlFor={\"input-\" + channelId}>{channelId + 1}</label>\n                    </>\n            ))}\n        </>\n    )\n};\n\nconst PresetEditor = (props: {\n    soundCard: SoundCard\n}) => {\n    const {soundCard} = props;\n    const {presets} = useStage();\n\n    return (\n        <div>\n            <h3>{soundCard.name}</h3>\n            <ul>\n                <li>\n                    {soundCard.numInputChannels} input channels\n                </li>\n                <li>\n                    {soundCard.numOutputChannels} output channels\n                </li>\n                <li>\n                    {soundCard.sampleRate} Hz sample rate\n                </li>\n            </ul>\n            <ul>\n                <li>\n                    {presets.bySoundCard[soundCard._id] && presets.bySoundCard[soundCard._id].map(id => presets.byId[id]).map(preset => (\n                        <div>\n                            {preset.name}\n                            <p>\n                                Input:\n                                <ul>\n                                    <li>\n                                        {Array.from(Array(soundCard.numInputChannels).keys()).map((channelId) => (\n                                            <>\n                                                <input id={\"input-\" + channelId} type=\"checkbox\" value={channelId}/>\n                                                <label htmlFor={\"input-\" + channelId}>{channelId + 1}</label>\n                                            </>\n                                        ))}\n                                    </li>\n                                </ul>\n                            </p>\n                            <p>\n                                Output:\n                                <ul>\n                                    <li>\n                                        {Array.from(Array(soundCard.numOutputChannels).keys()).map((channelId) => (\n                                            <>\n                                                <input id={\"output-\" + channelId} type=\"checkbox\" value={channelId}/>\n                                                <label htmlFor={\"output-\" + channelId}>{channelId + 1}</label>\n                                            </>\n                                        ))}\n                                    </li>\n                                </ul>\n                            </p>\n                        </div>\n                    ))}\n                </li>\n            </ul>\n        </div>\n    )\n};\nexport default PresetEditor;\n"]},"metadata":{},"sourceType":"module"}