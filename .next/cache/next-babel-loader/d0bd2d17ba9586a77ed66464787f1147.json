{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tobias/Developer/digitalstage/ov-simulator/libs/useAuth/index.tsx\";\nimport * as React from 'react';\nimport * as cookie from 'js-cookie';\nimport fetch from 'isomorphic-unfetch';\nimport debug from 'debug';\nimport AuthError from \"./AuthError\";\nexport const ErrorCodes = {\n  Unauthorized: 401,\n  NotActivated: 424,\n  NotFound: 404,\n  BadRequest: 400,\n  EmailAlreadyInUse: 409,\n  AlreadyActivated: 416,\n  InternalError: 500,\n  InvalidToken: 403\n};\nconst report = debug('digitalstage:auth');\n\nconst throwAddProviderError = () => {\n  throw new Error('Please wrap the DOM tree with the AuthProvider');\n};\n\nconst AuthContext = /*#__PURE__*/React.createContext({\n  loading: true,\n  createUserWithEmailAndPassword: throwAddProviderError,\n  signInWithEmailAndPassword: throwAddProviderError,\n  requestPasswordReset: throwAddProviderError,\n  resetPassword: throwAddProviderError,\n  logout: throwAddProviderError,\n  activate: throwAddProviderError,\n  resendActivationLink: throwAddProviderError\n});\n\nconst getUserByToken = (authUrl, token) => fetch(`${authUrl}/profile`, {\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`\n  }\n}).then(result => {\n  if (result.ok) {\n    return result.json();\n  } else {\n    throw new AuthError(result.status, result.statusText);\n  }\n}).then(json => json);\n\nconst AuthConsumer = AuthContext.Consumer;\n\nconst AuthProvider = props => {\n  const {\n    children,\n    authUrl\n  } = props;\n  const [token, setToken] = React.useState();\n  const [user, setUser] = React.useState();\n  const [loading, setLoading] = React.useState(true);\n  const createUserWithEmailAndPassword = React.useCallback((email, password, name, avatarUrl) => {\n    setLoading(true);\n    return fetch(`${authUrl}/signup`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password,\n        name,\n        avatarUrl: avatarUrl || ''\n      })\n    }).then(res => {\n      if (!res.ok) {\n        throw new AuthError(res.status, res.statusText);\n      }\n    });\n  }, [authUrl]);\n  const signInWithEmailAndPassword = React.useCallback((email, password, staySignedIn) => {\n    setLoading(true);\n    return fetch(`${authUrl}/login`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      if (res.ok) return res.json();\n      throw new AuthError(res.status, res.statusText);\n    }).then(resToken => getUserByToken(authUrl, resToken).then(resUser => {\n      setUser(resUser);\n      setToken(resToken);\n      cookie.set('token', resToken, {\n        expires: staySignedIn ? 7 : 1\n      });\n    })).finally(() => {\n      setLoading(false);\n    });\n  }, [authUrl]);\n  const requestPasswordReset = React.useCallback(email => fetch(`${authUrl}/forgot`, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      email\n    })\n  }).then(res => {\n    if (!res.ok) throw new AuthError(res.status, res.statusText);\n  }).catch(err => {\n    throw err;\n  }), [authUrl]);\n  const resetPassword = React.useCallback((resetToken, password) => fetch(`${authUrl}/reset`, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      token: resetToken,\n      password\n    })\n  }).then(res => {\n    if (!res.ok) {\n      throw new AuthError(res.status, res.statusText);\n    }\n  }), [authUrl]);\n  const activate = React.useCallback(code => {\n    return fetch(`${authUrl}/activate`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        code: code\n      })\n    }).then(res => {\n      if (!res.ok) throw new AuthError(res.status, res.statusText);\n    });\n  }, []);\n  const resendActivationLink = React.useCallback(email => {\n    return fetch(`${authUrl}/reactivate`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        email: email\n      })\n    }).then(res => {\n      if (!res.ok) throw new AuthError(res.status, res.statusText);\n    });\n  }, []);\n  const logout = React.useCallback(() => {\n    setLoading(true);\n    return fetch(`${authUrl}/logout`, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      method: 'POST'\n    }).then(res => {\n      if (res.ok) {\n        cookie.remove('token');\n        setToken(undefined);\n        setUser(undefined);\n      } else {\n        throw new AuthError(res.status, res.statusText);\n      }\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [token, authUrl]);\n  React.useEffect(() => {\n    // First get cookie\n    const resToken = cookie.get('token');\n\n    if (resToken) {\n      // Try to use the token to login\n      getUserByToken(authUrl, resToken).then(resUser => {\n        setUser(resUser);\n        setToken(resToken);\n      }).catch(resError => {\n        report(resError);\n        setUser(undefined);\n        setToken(undefined);\n        cookie.remove('token');\n      }).finally(() => {\n        setLoading(false);\n      });\n    } else {\n      setUser(undefined);\n      setLoading(false);\n    }\n\n    return () => {\n      setToken(undefined);\n      setUser(undefined);\n    };\n  }, [authUrl]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      createUserWithEmailAndPassword,\n      signInWithEmailAndPassword,\n      requestPasswordReset,\n      resetPassword,\n      logout,\n      user,\n      loading,\n      activate,\n      resendActivationLink,\n      token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 9\n  }, this);\n};\n\nconst useAuth = () => React.useContext(AuthContext);\n\nexport { AuthProvider, AuthConsumer };\nexport default useAuth;","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/libs/useAuth/index.tsx"],"names":["React","cookie","fetch","debug","AuthError","ErrorCodes","Unauthorized","NotActivated","NotFound","BadRequest","EmailAlreadyInUse","AlreadyActivated","InternalError","InvalidToken","report","throwAddProviderError","Error","AuthContext","createContext","loading","createUserWithEmailAndPassword","signInWithEmailAndPassword","requestPasswordReset","resetPassword","logout","activate","resendActivationLink","getUserByToken","authUrl","token","headers","Authorization","then","result","ok","json","status","statusText","AuthConsumer","Consumer","AuthProvider","props","children","setToken","useState","user","setUser","setLoading","useCallback","email","password","name","avatarUrl","method","body","JSON","stringify","res","staySignedIn","resToken","resUser","set","expires","finally","catch","err","resetToken","code","remove","undefined","useEffect","get","resError","useAuth","useContext"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as cookie from 'js-cookie';\nimport fetch from 'isomorphic-unfetch';\nimport debug from 'debug';\nimport {AuthUser} from \"./AuthUser\";\nimport AuthError from \"./AuthError\";\n\nexport const ErrorCodes = {\n    Unauthorized: 401,\n    NotActivated: 424,\n    NotFound: 404,\n    BadRequest: 400,\n    EmailAlreadyInUse: 409,\n    AlreadyActivated: 416,\n    InternalError: 500,\n    InvalidToken: 403,\n};\n\nconst report = debug('digitalstage:auth');\n\nexport interface TAuthContext {\n    user?: AuthUser;\n    loading: boolean;\n    token?: string;\n\n    createUserWithEmailAndPassword(\n        email: string,\n        password: string,\n        name: string,\n        avatarUrl?: string\n    ): Promise<any>;\n\n    signInWithEmailAndPassword(\n        email: string,\n        password: string,\n        staySignedIn?: boolean\n    ): Promise<any>;\n\n    requestPasswordReset(email: string): Promise<any>;\n\n    resetPassword(resetToken: string, password: string): Promise<any>;\n\n    activate(code: string): Promise<any>;\n\n    resendActivationLink(email: string): Promise<any>;\n\n    logout(): Promise<any>;\n}\n\nconst throwAddProviderError = () => {\n    throw new Error('Please wrap the DOM tree with the AuthProvider');\n};\n\nconst AuthContext = React.createContext<TAuthContext>({\n    loading: true,\n    createUserWithEmailAndPassword: throwAddProviderError,\n    signInWithEmailAndPassword: throwAddProviderError,\n    requestPasswordReset: throwAddProviderError,\n    resetPassword: throwAddProviderError,\n    logout: throwAddProviderError,\n    activate: throwAddProviderError,\n    resendActivationLink: throwAddProviderError,\n});\n\nconst getUserByToken = (authUrl: string, token: string): Promise<AuthUser> =>\n    fetch(`${authUrl}/profile`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n        },\n    })\n        .then((result) => {\n            if (result.ok) {\n                return result.json();\n            } else {\n                throw new AuthError(result.status, result.statusText);\n            }\n        })\n        .then((json) => json as AuthUser);\n\nconst AuthConsumer = AuthContext.Consumer;\n\nconst AuthProvider = (props: {\n    children: React.ReactNode;\n    authUrl: string;\n}) => {\n    const {children, authUrl} = props;\n\n    const [token, setToken] = React.useState<string>();\n    const [user, setUser] = React.useState<AuthUser>();\n    const [loading, setLoading] = React.useState<boolean>(true);\n\n    const createUserWithEmailAndPassword = React.useCallback(\n        (email: string, password: string, name: string, avatarUrl?: string) => {\n            setLoading(true);\n            return fetch(`${authUrl}/signup`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n                body: JSON.stringify({\n                    email,\n                    password,\n                    name,\n                    avatarUrl: avatarUrl || '',\n                }),\n            }).then((res) => {\n                if (!res.ok) {\n                    throw new AuthError(res.status, res.statusText);\n                }\n            });\n        },\n        [authUrl]\n    );\n\n    const signInWithEmailAndPassword = React.useCallback(\n        (email: string, password: string, staySignedIn?: boolean) => {\n            setLoading(true);\n            return fetch(`${authUrl}/login`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n                body: JSON.stringify({\n                    email,\n                    password,\n                }),\n            })\n                .then((res) => {\n                    if (res.ok) return res.json();\n                    throw new AuthError(res.status, res.statusText);\n                })\n                .then((resToken) =>\n                    getUserByToken(authUrl, resToken).then((resUser) => {\n                        setUser(resUser);\n                        setToken(resToken);\n                        cookie.set('token', resToken, { expires: staySignedIn ? 7 : 1 });\n                    })\n                )\n                .finally(() => {\n                    setLoading(false);\n                });\n        },\n        [authUrl]\n    );\n\n    const requestPasswordReset = React.useCallback(\n        (email: string) =>\n            fetch(`${authUrl}/forgot`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n                body: JSON.stringify({\n                    email,\n                }),\n            })\n                .then((res) => {\n                    if (!res.ok) throw new AuthError(res.status, res.statusText);\n                })\n                .catch((err) => {\n                    throw err;\n                }),\n        [authUrl]\n    );\n\n    const resetPassword = React.useCallback(\n        (resetToken: string, password: string) =>\n            fetch(`${authUrl}/reset`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n                body: JSON.stringify({\n                    token: resetToken,\n                    password,\n                }),\n            }).then((res) => {\n                if (!res.ok) {\n                    throw new AuthError(res.status, res.statusText);\n                }\n            }),\n        [authUrl]\n    );\n\n    const activate = React.useCallback((code: string): Promise<void> => {\n        return fetch(`${authUrl}/activate`, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            method: 'POST',\n            body: JSON.stringify({\n                code: code,\n            }),\n        }).then((res) => {\n            if (!res.ok) throw new AuthError(res.status, res.statusText);\n        });\n    }, []);\n\n    const resendActivationLink = React.useCallback((email: string): Promise<void> => {\n        return fetch(`${authUrl}/reactivate`, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            method: 'POST',\n            body: JSON.stringify({\n                email: email,\n            }),\n        }).then((res) => {\n            if (!res.ok) throw new AuthError(res.status, res.statusText);\n        });\n    }, []);\n\n    const logout = React.useCallback(() => {\n        setLoading(true);\n        return fetch(`${authUrl}/logout`, {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n            method: 'POST',\n        })\n            .then((res) => {\n                if (res.ok) {\n                    cookie.remove('token');\n                    setToken(undefined);\n                    setUser(undefined);\n                } else {\n                    throw new AuthError(res.status, res.statusText);\n                }\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, [token, authUrl]);\n\n    React.useEffect(() => {\n        // First get cookie\n        const resToken = cookie.get('token');\n        if (resToken) {\n            // Try to use the token to login\n            getUserByToken(authUrl, resToken)\n                .then((resUser) => {\n                    setUser(resUser);\n                    setToken(resToken);\n                })\n                .catch((resError) => {\n                    report(resError);\n                    setUser(undefined);\n                    setToken(undefined);\n                    cookie.remove('token');\n                })\n                .finally(() => {\n                    setLoading(false);\n                });\n        } else {\n            setUser(undefined);\n            setLoading(false);\n        }\n        return () => {\n            setToken(undefined);\n            setUser(undefined);\n        };\n    }, [authUrl]);\n\n    return (\n        <AuthContext.Provider\n            value={{\n                createUserWithEmailAndPassword,\n                signInWithEmailAndPassword,\n                requestPasswordReset,\n                resetPassword,\n                logout,\n                user,\n                loading,\n                activate,\n                resendActivationLink,\n                token,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nconst useAuth = (): TAuthContext => React.useContext<TAuthContext>(AuthContext);\n\nexport {\n    AuthProvider,\n    AuthConsumer\n}\nexport default useAuth;\n"]},"metadata":{},"sourceType":"module"}