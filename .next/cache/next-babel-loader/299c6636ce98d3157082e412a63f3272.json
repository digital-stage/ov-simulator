{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tobias/Developer/digitalstage/ov-simulator/pages/index.tsx\";\nimport { useEffect } from \"react\";\nimport useAuth from \"../libs/useAuth\";\nimport useStage, { MAC } from \"../libs/useStage\";\nimport SoundCardSimulator from \"../components/SoundCardSimulator\";\nconst email = \"test@digital-stage.org\";\nconst password = \"testtesttest\";\n\nconst Index = () => {\n  const {\n    signInWithEmailAndPassword,\n    token\n  } = useAuth();\n  const {\n    device,\n    soundCards,\n    presets\n  } = useStage();\n  useEffect(() => {\n    // Sign in\n    signInWithEmailAndPassword(email, password);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Usually any ov-client will do the following steps when connecting:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"1.) Get token: \", token ? \"ok\" : \"requesting\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"2.) Identify this Device by it's mac address '\", MAC, \"':\", device ? /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(device, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 31\n        }, this) : \"requesting\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"The ov-client now can update the server about the connected sound cards.\", /*#__PURE__*/_jsxDEV(SoundCardSimulator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Inside the webclient we now have the following entities:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Available sound cards (even if not used by any ov-client):\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: soundCards.allIds.map(id => soundCards.byId[id]).map(soundCard => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [soundCard.name, /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [soundCard.numInputChannels, \" input channels\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [soundCard.numOutputChannels, \" output channels\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [soundCard.sampleRate, \"Hz sample rate\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"PRESETS:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: presets.bySoundCard[soundCard._id] && presets.bySoundCard[soundCard._id].map(id => presets.byId[id]).map(preset => /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [preset.name, /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Input:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n                        children: /*#__PURE__*/_jsxDEV(\"li\", {\n                          children: Array.from(Array(soundCard.numInputChannels).keys()).map(() => /*#__PURE__*/_jsxDEV(_Fragment, {\n                            children: /*#__PURE__*/_jsxDEV(\"input\", {\n                              type: \"checkbox\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 71,\n                              columnNumber: 73\n                            }, this)\n                          }, void 0, false))\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 68,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 67,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 65,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Output:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n                        children: /*#__PURE__*/_jsxDEV(\"li\", {\n                          children: Array.from(Array(soundCard.numOutputChannels).keys()).map(() => /*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"checkbox\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 82,\n                            columnNumber: 69\n                          }, this))\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 80,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 79,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 77,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 63,\n                    columnNumber: 49\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                children: \"ADD PRESETS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ov-simulator/pages/index.tsx"],"names":["useEffect","useAuth","useStage","MAC","SoundCardSimulator","email","password","Index","signInWithEmailAndPassword","token","device","soundCards","presets","JSON","stringify","allIds","map","id","byId","soundCard","name","numInputChannels","numOutputChannels","sampleRate","bySoundCard","_id","preset","Array","from","keys"],"mappings":"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","sourcesContent":["import {useEffect} from \"react\";\nimport useAuth from \"../libs/useAuth\";\nimport useStage, {MAC} from \"../libs/useStage\";\nimport SoundCardSimulator from \"../components/SoundCardSimulator\";\n\nconst email = \"test@digital-stage.org\";\nconst password = \"testtesttest\";\n\n\nconst Index = () => {\n    const {signInWithEmailAndPassword, token} = useAuth();\n    const {device, soundCards, presets} = useStage();\n\n    useEffect(() => {\n        // Sign in\n        signInWithEmailAndPassword(email, password);\n    }, []);\n\n    return (\n        <div>\n            <p>\n                Usually any ov-client will do the following steps when connecting:\n            </p>\n            <ul>\n                <li>\n                    1.) Get token: {token ? \"ok\" : \"requesting\"}\n                </li>\n                <li>\n                    2.) Identify this Device by it's mac address '{MAC}':\n                    {device ? <pre>{JSON.stringify(device, null, 2)}</pre> : \"requesting\"}\n                </li>\n                <li>\n                    The ov-client now can update the server about the connected sound cards.\n                    <SoundCardSimulator/>\n                </li>\n            </ul>\n            <p>\n                Inside the webclient we now have the following entities:\n            </p>\n            <ul>\n                <li>\n                    Available sound cards (even if not used by any ov-client):\n                    <ul>\n                        {soundCards.allIds.map(id => soundCards.byId[id]).map(soundCard => (\n                            <li>\n                                {soundCard.name}\n                                <ul>\n                                    <li>\n                                        {soundCard.numInputChannels} input channels\n                                    </li>\n                                    <li>\n                                        {soundCard.numOutputChannels} output channels\n                                    </li>\n                                    <li>\n                                        {soundCard.sampleRate}Hz sample rate\n                                    </li>\n                                </ul>\n                                <p>\n                                    PRESETS:\n                                    <ul>\n                                        <li>\n                                            {presets.bySoundCard[soundCard._id] && presets.bySoundCard[soundCard._id].map(id => presets.byId[id]).map(preset => (\n                                                <div>\n                                                    {preset.name}\n                                                    <p>\n                                                        Input:\n                                                        <ul>\n                                                            <li>\n                                                                {Array.from(Array(soundCard.numInputChannels).keys()).map(() => (\n                                                                    <>\n                                                                        <input type=\"checkbox\"/>\n                                                                    </>\n                                                                ))}\n                                                            </li>\n                                                        </ul>\n                                                    </p>\n                                                    <p>\n                                                        Output:\n                                                        <ul>\n                                                            <li>\n                                                                {Array.from(Array(soundCard.numOutputChannels).keys()).map(() => (\n                                                                    <input type=\"checkbox\"/>\n                                                                ))}\n                                                            </li>\n                                                        </ul>\n                                                    </p>\n                                                </div>\n                                            ))}\n                                        </li>\n                                    </ul>\n                                    <button>\n                                        ADD PRESETS\n                                    </button>\n                                </p>\n                            </li>\n                        ))}\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    )\n};\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}